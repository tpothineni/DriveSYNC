{"ast":null,"code":"var _jsxFileName = \"/Users/pothinenitarunkumar/Desktop/Frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [user, setUser] = useState(null);\n//   const [files, setFiles] = useState([]);\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(false);\n\n//   //Fetch user and files on mount\n//   useEffect(() => {\n//     const fetchUser = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8080/user', {withCredentials: true,});\n//         setUser(response.data);\n//         fetchFiles();\n//       } catch (err) {\n//         if (err.response?.status === 401) {\n//           setUser(null); // User not authenticated\n//         } else {\n//           console.error('Error fetching user:', err);\n//           setError('Error fetching user');\n//         }\n//       }\n//     };\n\n//     fetchUser();\n//   }, []);\n\n//   // Fetch Google Drive files\n//   const fetchFiles = async () => {\n//     try {\n//       setLoading(true);\n//       const response = await axios.get('http://localhost:8080/drive/files', {withCredentials: true,});\n//       const data = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\n//       setFiles(data.files || []);\n//     } catch (err) {\n//       console.error('Error fetching files:', err);\n//       setError('Error fetching files');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Upload file\n//   const handleFileUpload = async (e) => {\n//     e.preventDefault();\n//     if (!selectedFile) return;\n\n//     const formData = new FormData();\n//     formData.append('file', selectedFile);\n\n//     try {\n//       await axios.post('http://localhost:8080/drive/upload', formData, {\n//         withCredentials: true,\n//         headers: { 'Content-Type': 'multipart/form-data' },\n//       });\n//       setSelectedFile(null);\n//       fetchFiles();\n//     } catch (err) {\n//       console.error('Error uploading file:', err);\n//       setError('Error uploading file');\n//     }\n//   };\n\n//   // Delete file\n//   const handleDelete = async (fileId) => {\n//     try {\n//       await axios.delete(`http://localhost:8080/drive/files/${fileId}`, {withCredentials: true,});\n//       fetchFiles();\n//     } catch (err) {\n//       console.error('Error deleting file:', err);\n//       setError('Error deleting file');\n//     }\n//   };\n\n//   // Download file\n//   const handleDownload = async (fileId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:8080/drive/files/download/${fileId}`,\n//         {\n//           withCredentials: true,\n//           responseType: 'blob',\n//         }\n//       );\n\n//       const blob = new Blob([response.data], {\n//         type: response.headers['content-type'],\n//       });\n\n//       let filename = 'downloadedFile';\n//       const disposition = response.headers['content-disposition'];\n//       if (disposition && disposition.includes('filename=')) {\n//         const match = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/.exec(disposition);\n//         if (match && match[1]) {\n//           filename = match[1].replace(/['\"]/g, '');\n//         }\n//       }\n\n//       const url = window.URL.createObjectURL(blob);\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n//       document.body.appendChild(link);\n//       link.click();\n//       document.body.removeChild(link);\n//       window.URL.revokeObjectURL(url);\n//     } catch (err) {\n//       console.error('Error downloading file:', err);\n//       setError('Error downloading file');\n//     }\n//   };\n\n//   //Logout user\n//   const handleLogout = async () => {\n//     try {\n//       await axios.post('http://localhost:8080/logout', {}, {withCredentials: true,});\n//       setUser(null);\n//       setFiles([]);\n//       setSelectedFile(null);\n//       setError('');\n//       window.location.href = 'http://localhost:3000';\n//     } catch (err) {\n//       console.error('Logout failed:', err);\n//     }\n//   };\n\n//   return (\n//     <div style={{ margin: '20px' }}>\n//       <h1>DriveSync App</h1>\n\n//       {user ? (\n//         <>\n//           <p>Welcome, {user.name || user.email || 'User'}!</p>\n\n//           <button onClick={handleLogout}>Logout</button>\n//           <button onClick={fetchFiles} style={{ marginLeft: '10px' }}>Refresh Files</button>\n\n//           {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//           <h2>Your Google Drive Files</h2>\n//           {loading ? (\n//             <p>Loading files...</p>\n//           ) : files.length ? (\n//             <ul>\n//               {files.map((file) => (\n//                 <li key={file.id}>\n//                   {file.name}{' '}\n//                   <button onClick={() => handleDelete(file.id)}>Delete</button>\n//                   <button onClick={() => handleDownload(file.id)}>Download</button>\n//                 </li>\n//               ))}\n//             </ul>\n//           ) : (\n//             <p>No files found.</p>\n//           )}\n\n//           <h2>Upload a File</h2>\n//           <form onSubmit={handleFileUpload}>\n//             <input\n//               type=\"file\"\n//               onChange={(e) => setSelectedFile(e.target.files[0])}\n//             />\n//             <button type=\"submit\">Upload</button>\n//           </form>\n//         </>\n//       ) : (\n//         <div>\n//           <p>You are not logged in.</p>\n//           <button\n//             onClick={() =>\n//               window.location.href = 'http://localhost:8080/oauth2/authorization/google'\n//             }\n//           >\n//             Login with Google\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// ✅ Get CSRF token from cookie\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction getCsrfToken() {\n  const match = document.cookie.match(/XSRF-TOKEN=([^;]+)/);\n  return match ? decodeURIComponent(match[1]) : null;\n}\n\n// ✅ Axios interceptor to attach CSRF token\naxios.interceptors.request.use(config => {\n  const token = getCsrfToken();\n  if (token) {\n    config.headers['X-XSRF-TOKEN'] = token;\n  }\n  return config;\n});\nfunction App() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [files, setFiles] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/user', {\n          withCredentials: true\n        });\n        setUser(response.data);\n        fetchFiles();\n      } catch (err) {\n        var _err$response;\n        if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401) {\n          setUser(null); // User not authenticated\n        } else {\n          console.error('Error fetching user:', err);\n          setError('Error fetching user');\n        }\n      }\n    };\n    fetchUser();\n  }, []);\n  const fetchFiles = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8080/drive/files', {\n        withCredentials: true\n      });\n      const data = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\n      setFiles(data.files || []);\n    } catch (err) {\n      console.error('Error fetching files:', err);\n      setError('Error fetching files');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleFileUpload = async e => {\n    e.preventDefault();\n    if (!selectedFile) return;\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      await axios.post('http://localhost:8080/drive/upload', formData, {\n        withCredentials: true,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setSelectedFile(null);\n      fetchFiles();\n    } catch (err) {\n      console.error('Error uploading file:', err);\n      setError('Error uploading file');\n    }\n  };\n\n  // ✅ Updated to include CSRF token + dummy body\n  const handleDelete = async fileId => {\n    try {\n      await axios.delete(`http://localhost:8080/drive/files/${fileId}`, {\n        withCredentials: true,\n        headers: {\n          'X-XSRF-TOKEN': getCsrfToken()\n        },\n        data: {} // Required to force CSRF token evaluation\n      });\n      fetchFiles();\n    } catch (err) {\n      console.error('Error deleting file:', err);\n      setError('Error deleting file');\n    }\n  };\n  const handleDownload = async fileId => {\n    try {\n      const response = await axios.get(`http://localhost:8080/drive/files/download/${fileId}`, {\n        withCredentials: true,\n        responseType: 'blob'\n      });\n      const blob = new Blob([response.data], {\n        type: response.headers['content-type']\n      });\n      let filename = 'downloadedFile';\n      const disposition = response.headers['content-disposition'];\n      if (disposition && disposition.includes('filename=')) {\n        const match = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/.exec(disposition);\n        if (match && match[1]) {\n          filename = match[1].replace(/['\"]/g, '');\n        }\n      }\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      console.error('Error downloading file:', err);\n      setError('Error downloading file');\n    }\n  };\n  const handleLogout = async () => {\n    try {\n      await axios.post('http://localhost:8080/logout', {}, {\n        withCredentials: true,\n        headers: {\n          'X-XSRF-TOKEN': getCsrfToken()\n        }\n      });\n      setUser(null);\n      setFiles([]);\n      setSelectedFile(null);\n      setError('');\n      window.location.href = 'http://localhost:3000';\n    } catch (err) {\n      console.error('Logout failed:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"DriveSync App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), user ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Welcome, \", user.name || user.email || 'User', \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchFiles,\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Refresh Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Google Drive Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading files...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }, this) : files.length ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: files.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.name, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDelete(file.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDownload(file.id),\n            children: \"Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 19\n          }, this)]\n        }, file.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No files found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload a File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleFileUpload,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setSelectedFile(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are not logged in.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.href = 'http://localhost:8080/oauth2/authorization/google',\n        children: \"Login with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KprMaRGPM+Qxk67juTfrj/t8hXU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","getCsrfToken","match","document","cookie","decodeURIComponent","interceptors","request","use","config","token","headers","App","_s","user","setUser","files","setFiles","selectedFile","setSelectedFile","error","setError","loading","setLoading","fetchUser","response","get","withCredentials","data","fetchFiles","err","_err$response","status","console","JSON","parse","handleFileUpload","e","preventDefault","formData","FormData","append","post","handleDelete","fileId","delete","handleDownload","responseType","blob","Blob","type","filename","disposition","includes","exec","replace","url","window","URL","createObjectURL","link","createElement","href","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","handleLogout","location","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","name","email","onClick","marginLeft","color","length","map","file","id","onSubmit","onChange","target","_c","$RefreshReg$"],"sources":["/Users/pothinenitarunkumar/Desktop/Frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [user, setUser] = useState(null);\n//   const [files, setFiles] = useState([]);\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(false);\n\n//   //Fetch user and files on mount\n//   useEffect(() => {\n//     const fetchUser = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8080/user', {withCredentials: true,});\n//         setUser(response.data);\n//         fetchFiles();\n//       } catch (err) {\n//         if (err.response?.status === 401) {\n//           setUser(null); // User not authenticated\n//         } else {\n//           console.error('Error fetching user:', err);\n//           setError('Error fetching user');\n//         }\n//       }\n//     };\n\n//     fetchUser();\n//   }, []);\n\n//   // Fetch Google Drive files\n//   const fetchFiles = async () => {\n//     try {\n//       setLoading(true);\n//       const response = await axios.get('http://localhost:8080/drive/files', {withCredentials: true,});\n//       const data = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\n//       setFiles(data.files || []);\n//     } catch (err) {\n//       console.error('Error fetching files:', err);\n//       setError('Error fetching files');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Upload file\n//   const handleFileUpload = async (e) => {\n//     e.preventDefault();\n//     if (!selectedFile) return;\n\n//     const formData = new FormData();\n//     formData.append('file', selectedFile);\n\n//     try {\n//       await axios.post('http://localhost:8080/drive/upload', formData, {\n//         withCredentials: true,\n//         headers: { 'Content-Type': 'multipart/form-data' },\n//       });\n//       setSelectedFile(null);\n//       fetchFiles();\n//     } catch (err) {\n//       console.error('Error uploading file:', err);\n//       setError('Error uploading file');\n//     }\n//   };\n\n//   // Delete file\n//   const handleDelete = async (fileId) => {\n//     try {\n//       await axios.delete(`http://localhost:8080/drive/files/${fileId}`, {withCredentials: true,});\n//       fetchFiles();\n//     } catch (err) {\n//       console.error('Error deleting file:', err);\n//       setError('Error deleting file');\n//     }\n//   };\n\n//   // Download file\n//   const handleDownload = async (fileId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:8080/drive/files/download/${fileId}`,\n//         {\n//           withCredentials: true,\n//           responseType: 'blob',\n//         }\n//       );\n\n//       const blob = new Blob([response.data], {\n//         type: response.headers['content-type'],\n//       });\n\n//       let filename = 'downloadedFile';\n//       const disposition = response.headers['content-disposition'];\n//       if (disposition && disposition.includes('filename=')) {\n//         const match = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/.exec(disposition);\n//         if (match && match[1]) {\n//           filename = match[1].replace(/['\"]/g, '');\n//         }\n//       }\n\n//       const url = window.URL.createObjectURL(blob);\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n//       document.body.appendChild(link);\n//       link.click();\n//       document.body.removeChild(link);\n//       window.URL.revokeObjectURL(url);\n//     } catch (err) {\n//       console.error('Error downloading file:', err);\n//       setError('Error downloading file');\n//     }\n//   };\n\n//   //Logout user\n//   const handleLogout = async () => {\n//     try {\n//       await axios.post('http://localhost:8080/logout', {}, {withCredentials: true,});\n//       setUser(null);\n//       setFiles([]);\n//       setSelectedFile(null);\n//       setError('');\n//       window.location.href = 'http://localhost:3000';\n//     } catch (err) {\n//       console.error('Logout failed:', err);\n//     }\n//   };\n\n//   return (\n//     <div style={{ margin: '20px' }}>\n//       <h1>DriveSync App</h1>\n\n//       {user ? (\n//         <>\n//           <p>Welcome, {user.name || user.email || 'User'}!</p>\n\n//           <button onClick={handleLogout}>Logout</button>\n//           <button onClick={fetchFiles} style={{ marginLeft: '10px' }}>Refresh Files</button>\n\n//           {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//           <h2>Your Google Drive Files</h2>\n//           {loading ? (\n//             <p>Loading files...</p>\n//           ) : files.length ? (\n//             <ul>\n//               {files.map((file) => (\n//                 <li key={file.id}>\n//                   {file.name}{' '}\n//                   <button onClick={() => handleDelete(file.id)}>Delete</button>\n//                   <button onClick={() => handleDownload(file.id)}>Download</button>\n//                 </li>\n//               ))}\n//             </ul>\n//           ) : (\n//             <p>No files found.</p>\n//           )}\n\n//           <h2>Upload a File</h2>\n//           <form onSubmit={handleFileUpload}>\n//             <input\n//               type=\"file\"\n//               onChange={(e) => setSelectedFile(e.target.files[0])}\n//             />\n//             <button type=\"submit\">Upload</button>\n//           </form>\n//         </>\n//       ) : (\n//         <div>\n//           <p>You are not logged in.</p>\n//           <button\n//             onClick={() =>\n//               window.location.href = 'http://localhost:8080/oauth2/authorization/google'\n//             }\n//           >\n//             Login with Google\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// ✅ Get CSRF token from cookie\nfunction getCsrfToken() {\n  const match = document.cookie.match(/XSRF-TOKEN=([^;]+)/);\n  return match ? decodeURIComponent(match[1]) : null;\n}\n\n// ✅ Axios interceptor to attach CSRF token\naxios.interceptors.request.use(config => {\n  const token = getCsrfToken();\n  if (token) {\n    config.headers['X-XSRF-TOKEN'] = token;\n  }\n  return config;\n});\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [files, setFiles] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/user', { withCredentials: true });\n        setUser(response.data);\n        fetchFiles();\n      } catch (err) {\n        if (err.response?.status === 401) {\n          setUser(null); // User not authenticated\n        } else {\n          console.error('Error fetching user:', err);\n          setError('Error fetching user');\n        }\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  const fetchFiles = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8080/drive/files', { withCredentials: true });\n      const data = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\n      setFiles(data.files || []);\n    } catch (err) {\n      console.error('Error fetching files:', err);\n      setError('Error fetching files');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFileUpload = async (e) => {\n    e.preventDefault();\n    if (!selectedFile) return;\n\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n\n    try {\n      await axios.post('http://localhost:8080/drive/upload', formData, {\n        withCredentials: true,\n        headers: { 'Content-Type': 'multipart/form-data' },\n      });\n      setSelectedFile(null);\n      fetchFiles();\n    } catch (err) {\n      console.error('Error uploading file:', err);\n      setError('Error uploading file');\n    }\n  };\n\n  // ✅ Updated to include CSRF token + dummy body\n  const handleDelete = async (fileId) => {\n    try {\n      await axios.delete(`http://localhost:8080/drive/files/${fileId}`, {\n        withCredentials: true,\n        headers: { 'X-XSRF-TOKEN': getCsrfToken() },\n        data: {}, // Required to force CSRF token evaluation\n      });\n      fetchFiles();\n    } catch (err) {\n      console.error('Error deleting file:', err);\n      setError('Error deleting file');\n    }\n  };\n\n  const handleDownload = async (fileId) => {\n    try {\n      const response = await axios.get(`http://localhost:8080/drive/files/download/${fileId}`, {\n        withCredentials: true,\n        responseType: 'blob',\n      });\n\n      const blob = new Blob([response.data], {\n        type: response.headers['content-type'],\n      });\n\n      let filename = 'downloadedFile';\n      const disposition = response.headers['content-disposition'];\n      if (disposition && disposition.includes('filename=')) {\n        const match = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/.exec(disposition);\n        if (match && match[1]) {\n          filename = match[1].replace(/['\"]/g, '');\n        }\n      }\n\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      console.error('Error downloading file:', err);\n      setError('Error downloading file');\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await axios.post('http://localhost:8080/logout', {}, {\n        withCredentials: true,\n        headers: { 'X-XSRF-TOKEN': getCsrfToken() },\n      });\n      setUser(null);\n      setFiles([]);\n      setSelectedFile(null);\n      setError('');\n      window.location.href = 'http://localhost:3000';\n    } catch (err) {\n      console.error('Logout failed:', err);\n    }\n  };\n\n  return (\n    <div style={{ margin: '20px' }}>\n      <h1>DriveSync App</h1>\n\n      {user ? (\n        <>\n          <p>Welcome, {user.name || user.email || 'User'}!</p>\n\n          <button onClick={handleLogout}>Logout</button>\n          <button onClick={fetchFiles} style={{ marginLeft: '10px' }}>Refresh Files</button>\n\n          {error && <p style={{ color: 'red' }}>{error}</p>}\n\n          <h2>Your Google Drive Files</h2>\n          {loading ? (\n            <p>Loading files...</p>\n          ) : files.length ? (\n            <ul>\n              {files.map((file) => (\n                <li key={file.id}>\n                  {file.name}{' '}\n                  <button onClick={() => handleDelete(file.id)}>Delete</button>\n                  <button onClick={() => handleDownload(file.id)}>Download</button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>No files found.</p>\n          )}\n\n          <h2>Upload a File</h2>\n          <form onSubmit={handleFileUpload}>\n            <input\n              type=\"file\"\n              onChange={(e) => setSelectedFile(e.target.files[0])}\n            />\n            <button type=\"submit\">Upload</button>\n          </form>\n        </>\n      ) : (\n        <div>\n          <p>You are not logged in.</p>\n          <button\n            onClick={() =>\n              window.location.href = 'http://localhost:8080/oauth2/authorization/google'\n            }\n          >\n            Login with Google\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,YAAYA,CAAA,EAAG;EACtB,MAAMC,KAAK,GAAGC,QAAQ,CAACC,MAAM,CAACF,KAAK,CAAC,oBAAoB,CAAC;EACzD,OAAOA,KAAK,GAAGG,kBAAkB,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;AACpD;;AAEA;AACAN,KAAK,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}