{"ast":null,"code":"var _jsxFileName = \"/Users/pothinenitarunkumar/Desktop/Frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   // State for authenticated user\n//   const [user, setUser] = useState(null);\n//   // State for files fetched from Google Drive\n//   const [files, setFiles] = useState([]);\n//   // State for the file selected for upload\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   // State for error messages\n//   const [error, setError] = useState('');\n//   // Loading state for file list\n//   const [loading, setLoading] = useState(false);\n\n//   // Fetch user details from backend if authenticated\n//   const fetchUser = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:8080/user', { withCredentials: true });\n//       setUser(response.data);\n//     } catch (err) {\n//       console.error('Error fetching user:', err);\n//     }\n//   };\n\n//   // Fetch list of files from Google Drive\n//   const fetchFiles = async () => {\n//     try {\n//       setLoading(true);\n//       const response = await axios.get('http://localhost:8080/drive/files', { withCredentials: true });\n//       // If response is a JSON string, parse it\n//       const data = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\n//       setFiles(data.files || []);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching files:', err);\n//       setError('Error fetching files. Are you authenticated?');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Upload file handler\n//   const handleFileUpload = async (e) => {\n//     e.preventDefault();\n//     if (!selectedFile) return;\n//     const formData = new FormData();\n//     formData.append('file', selectedFile);\n//     try {\n//       await axios.post('http://localhost:8080/drive/upload', formData, {\n//         withCredentials: true,\n//         headers: { 'Content-Type': 'multipart/form-data' },\n//       });\n//       setError('');\n//       setSelectedFile(null);\n//       // Refresh file list after successful upload\n//       fetchFiles();\n//     } catch (err) {\n//       console.error('Error uploading file:', err);\n//       setError('Error uploading file');\n//     }\n//   };\n\n//   // Delete file handler\n//   const handleDelete = async (fileId) => {\n//     try {\n//       await axios.delete(`http://localhost:8080/drive/files/${fileId}`, { withCredentials: true });\n//       setError('');\n//       // Refresh file list after deletion\n//       fetchFiles();\n//     } catch (err) {\n//       console.error('Error deleting file:', err);\n//       setError('Error deleting file');\n//     }\n//   };\n\n//   const handleDownload = async (fileId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:8080/drive/files/download/${fileId}`, { \n//         withCredentials: true,\n//         responseType: 'blob' \n//       });\n\n//       // Create a blob from the response data.\n//       const blob = new Blob([response.data], { type: response.headers['content-type'] });\n\n//       // Optionally, try to extract the filename from the content-disposition header.\n//       let filename = 'downloadedFile';\n//       const disposition = response.headers['content-disposition'];\n//       if (disposition && disposition.indexOf('filename=') !== -1) {\n//         const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n//         const matches = filenameRegex.exec(disposition);\n//         if (matches != null && matches[1]) { \n//             filename = matches[1].replace(/['\"]/g, '');\n//         }\n//       }\n\n//       // Create a temporary download link and trigger it.\n//       const url = window.URL.createObjectURL(blob);\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n//       document.body.appendChild(link);\n//       link.click();\n\n//       // Clean up the link.\n//       document.body.removeChild(link);\n//       window.URL.revokeObjectURL(url);\n//       setError('');\n\n//       // Refresh file list if needed.\n//       fetchFiles();\n//     } catch (err) {\n//       console.error('Error downloading file:', err);\n//       setError('Error downloading file');\n//     }\n//   };\n\n//   // On component mount, fetch user info\n//   useEffect(() => {\n//     fetchUser();\n//   }, []);\n\n//   // When user is authenticated, fetch files\n//   useEffect(() => {\n//     if (user) {\n//       fetchFiles();\n//     }\n//   }, [user]);\n\n//   return (\n//     <div style={{ margin: '20px' }}>\n//       <h1>DriveSync App</h1>\n//       {user ? (\n//         <>\n//           <p>Welcome, {user.name || user.email || 'User'}!</p>\n//           <div>\n//             <a href=\"http://localhost:8080/logout\"><button>Logout</button></a>\n//           </div>\n//           <div>\n//               <button onClick={fetchFiles}>Refresh Files</button>\n//           </div>\n//           {error && <p style={{ color: 'red' }}>{error}</p>}\n//           <h2>Your Google Drive Files</h2>\n//           {loading ? (\n//             <p>Loading files...</p>\n//           ) : files.length ? (\n//             <ul>\n//               {files.map((file) => (\n//                 <li key={file.id}>\n//                   {file.name}{' '}\n//                   <button onClick={() => handleDelete(file.id)}>Delete</button>\n//                   <button onClick={() => handleDownload(file.id)}>Download</button>\n//                 </li>\n//               ))}\n//             </ul>\n//           ) : (\n//             <p>No files found.</p>\n//           )}\n//           <h2>Upload a File</h2>\n//           <form onSubmit={handleFileUpload}>\n//             <input type=\"file\" onChange={(e) => setSelectedFile(e.target.files[0])} />\n//             <button type=\"submit\">Upload</button>\n//           </form>\n//         </>\n//       ) : (\n//         <div>\n//           <p>You are not logged in.</p>\n//           {/* Redirect to the OAuth2 endpoint to start login */}\n//           <a href=\"http://localhost:8080/oauth2/authorization/google\">\n//             <button>Login with Google</button>\n//           </a>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [files, setFiles] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // ✅ Always attempt to fetch user\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  // ✅ Fetch authenticated user info\n  const fetchUser = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/user', {\n        withCredentials: true\n      });\n      console.log(\"✅ Logged-in user:\", response.data);\n      setUser(response.data);\n      fetchFiles(); // Fetch files only if user is authenticated\n    } catch (err) {\n      var _err$response;\n      if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401) {\n        console.warn(\"🔒 Not authenticated. Showing login.\");\n        setUser(null);\n      } else {\n        console.error(\"❌ Error fetching user:\", err);\n        setError('Failed to fetch user.');\n      }\n    }\n  };\n\n  // ✅ Fetch user's Google Drive files\n  const fetchFiles = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8080/drive/files', {\n        withCredentials: true\n      });\n      const data = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\n      setFiles(data.files || []);\n      setError('');\n    } catch (err) {\n      console.error('❌ Error fetching files:', err);\n      setError('Error fetching files. Are you authenticated?');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ✅ Upload a file to Google Drive\n  const handleFileUpload = async e => {\n    e.preventDefault();\n    if (!selectedFile) return;\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      await axios.post('http://localhost:8080/drive/upload', formData, {\n        withCredentials: true,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setSelectedFile(null);\n      fetchFiles(); // Refresh list\n    } catch (err) {\n      console.error('❌ Error uploading file:', err);\n      setError('Error uploading file');\n    }\n  };\n\n  // ✅ Delete a file\n  const handleDelete = async fileId => {\n    try {\n      await axios.delete(`http://localhost:8080/drive/files/${fileId}`, {\n        withCredentials: true\n      });\n      fetchFiles(); // Refresh list\n    } catch (err) {\n      console.error('❌ Error deleting file:', err);\n      setError('Error deleting file');\n    }\n  };\n\n  // ✅ Download a file\n  const handleDownload = async fileId => {\n    try {\n      const response = await axios.get(`http://localhost:8080/drive/files/download/${fileId}`, {\n        withCredentials: true,\n        responseType: 'blob'\n      });\n      const blob = new Blob([response.data], {\n        type: response.headers['content-type']\n      });\n      let filename = 'downloadedFile';\n      const disposition = response.headers['content-disposition'];\n      if (disposition && disposition.indexOf('filename=') !== -1) {\n        const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n        const matches = filenameRegex.exec(disposition);\n        if (matches != null && matches[1]) {\n          filename = matches[1].replace(/['\"]/g, '');\n        }\n      }\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      console.error('❌ Error downloading file:', err);\n      setError('Error downloading file');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"DriveSync App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), user ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Welcome, \", user.name || user.email || 'User', \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"http://localhost:8080/logout\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchFiles,\n          children: \"Refresh Files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Google Drive Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading files...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 13\n      }, this) : files.length ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: files.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.name, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDelete(file.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDownload(file.id),\n            children: \"Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 19\n          }, this)]\n        }, file.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No files found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload a File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleFileUpload,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setSelectedFile(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are not logged in.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.href = 'http://localhost:8080/oauth2/authorization/google',\n        children: \"Login with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KprMaRGPM+Qxk67juTfrj/t8hXU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","user","setUser","files","setFiles","selectedFile","setSelectedFile","error","setError","loading","setLoading","fetchUser","response","get","withCredentials","console","log","data","fetchFiles","err","_err$response","status","warn","JSON","parse","handleFileUpload","e","preventDefault","formData","FormData","append","post","headers","handleDelete","fileId","delete","handleDownload","responseType","blob","Blob","type","filename","disposition","indexOf","filenameRegex","matches","exec","replace","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","name","email","marginBottom","onClick","color","length","map","file","id","onSubmit","onChange","target","location","_c","$RefreshReg$"],"sources":["/Users/pothinenitarunkumar/Desktop/Frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   // State for authenticated user\n//   const [user, setUser] = useState(null);\n//   // State for files fetched from Google Drive\n//   const [files, setFiles] = useState([]);\n//   // State for the file selected for upload\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   // State for error messages\n//   const [error, setError] = useState('');\n//   // Loading state for file list\n//   const [loading, setLoading] = useState(false);\n\n//   // Fetch user details from backend if authenticated\n//   const fetchUser = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:8080/user', { withCredentials: true });\n//       setUser(response.data);\n//     } catch (err) {\n//       console.error('Error fetching user:', err);\n//     }\n//   };\n\n//   // Fetch list of files from Google Drive\n//   const fetchFiles = async () => {\n//     try {\n//       setLoading(true);\n//       const response = await axios.get('http://localhost:8080/drive/files', { withCredentials: true });\n//       // If response is a JSON string, parse it\n//       const data = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\n//       setFiles(data.files || []);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching files:', err);\n//       setError('Error fetching files. Are you authenticated?');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Upload file handler\n//   const handleFileUpload = async (e) => {\n//     e.preventDefault();\n//     if (!selectedFile) return;\n//     const formData = new FormData();\n//     formData.append('file', selectedFile);\n//     try {\n//       await axios.post('http://localhost:8080/drive/upload', formData, {\n//         withCredentials: true,\n//         headers: { 'Content-Type': 'multipart/form-data' },\n//       });\n//       setError('');\n//       setSelectedFile(null);\n//       // Refresh file list after successful upload\n//       fetchFiles();\n//     } catch (err) {\n//       console.error('Error uploading file:', err);\n//       setError('Error uploading file');\n//     }\n//   };\n\n//   // Delete file handler\n//   const handleDelete = async (fileId) => {\n//     try {\n//       await axios.delete(`http://localhost:8080/drive/files/${fileId}`, { withCredentials: true });\n//       setError('');\n//       // Refresh file list after deletion\n//       fetchFiles();\n//     } catch (err) {\n//       console.error('Error deleting file:', err);\n//       setError('Error deleting file');\n//     }\n//   };\n\n\n  \n//   const handleDownload = async (fileId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:8080/drive/files/download/${fileId}`, { \n//         withCredentials: true,\n//         responseType: 'blob' \n//       });\n      \n//       // Create a blob from the response data.\n//       const blob = new Blob([response.data], { type: response.headers['content-type'] });\n      \n//       // Optionally, try to extract the filename from the content-disposition header.\n//       let filename = 'downloadedFile';\n//       const disposition = response.headers['content-disposition'];\n//       if (disposition && disposition.indexOf('filename=') !== -1) {\n//         const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n//         const matches = filenameRegex.exec(disposition);\n//         if (matches != null && matches[1]) { \n//             filename = matches[1].replace(/['\"]/g, '');\n//         }\n//       }\n      \n//       // Create a temporary download link and trigger it.\n//       const url = window.URL.createObjectURL(blob);\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n//       document.body.appendChild(link);\n//       link.click();\n      \n//       // Clean up the link.\n//       document.body.removeChild(link);\n//       window.URL.revokeObjectURL(url);\n//       setError('');\n      \n//       // Refresh file list if needed.\n//       fetchFiles();\n//     } catch (err) {\n//       console.error('Error downloading file:', err);\n//       setError('Error downloading file');\n//     }\n//   };\n  \n\n//   // On component mount, fetch user info\n//   useEffect(() => {\n//     fetchUser();\n//   }, []);\n\n//   // When user is authenticated, fetch files\n//   useEffect(() => {\n//     if (user) {\n//       fetchFiles();\n//     }\n//   }, [user]);\n\n//   return (\n//     <div style={{ margin: '20px' }}>\n//       <h1>DriveSync App</h1>\n//       {user ? (\n//         <>\n//           <p>Welcome, {user.name || user.email || 'User'}!</p>\n//           <div>\n//             <a href=\"http://localhost:8080/logout\"><button>Logout</button></a>\n//           </div>\n//           <div>\n//               <button onClick={fetchFiles}>Refresh Files</button>\n//           </div>\n//           {error && <p style={{ color: 'red' }}>{error}</p>}\n//           <h2>Your Google Drive Files</h2>\n//           {loading ? (\n//             <p>Loading files...</p>\n//           ) : files.length ? (\n//             <ul>\n//               {files.map((file) => (\n//                 <li key={file.id}>\n//                   {file.name}{' '}\n//                   <button onClick={() => handleDelete(file.id)}>Delete</button>\n//                   <button onClick={() => handleDownload(file.id)}>Download</button>\n//                 </li>\n//               ))}\n//             </ul>\n//           ) : (\n//             <p>No files found.</p>\n//           )}\n//           <h2>Upload a File</h2>\n//           <form onSubmit={handleFileUpload}>\n//             <input type=\"file\" onChange={(e) => setSelectedFile(e.target.files[0])} />\n//             <button type=\"submit\">Upload</button>\n//           </form>\n//         </>\n//       ) : (\n//         <div>\n//           <p>You are not logged in.</p>\n//           {/* Redirect to the OAuth2 endpoint to start login */}\n//           <a href=\"http://localhost:8080/oauth2/authorization/google\">\n//             <button>Login with Google</button>\n//           </a>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [files, setFiles] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // ✅ Always attempt to fetch user\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  // ✅ Fetch authenticated user info\n  const fetchUser = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/user', {\n        withCredentials: true,\n      });\n      console.log(\"✅ Logged-in user:\", response.data);\n      setUser(response.data);\n      fetchFiles(); // Fetch files only if user is authenticated\n    } catch (err) {\n      if (err.response?.status === 401) {\n        console.warn(\"🔒 Not authenticated. Showing login.\");\n        setUser(null);\n      } else {\n        console.error(\"❌ Error fetching user:\", err);\n        setError('Failed to fetch user.');\n      }\n    }\n  };\n\n  // ✅ Fetch user's Google Drive files\n  const fetchFiles = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8080/drive/files', {\n        withCredentials: true,\n      });\n      const data = typeof response.data === 'string'\n        ? JSON.parse(response.data)\n        : response.data;\n      setFiles(data.files || []);\n      setError('');\n    } catch (err) {\n      console.error('❌ Error fetching files:', err);\n      setError('Error fetching files. Are you authenticated?');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ✅ Upload a file to Google Drive\n  const handleFileUpload = async (e) => {\n    e.preventDefault();\n    if (!selectedFile) return;\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      await axios.post('http://localhost:8080/drive/upload', formData, {\n        withCredentials: true,\n        headers: { 'Content-Type': 'multipart/form-data' },\n      });\n      setSelectedFile(null);\n      fetchFiles(); // Refresh list\n    } catch (err) {\n      console.error('❌ Error uploading file:', err);\n      setError('Error uploading file');\n    }\n  };\n\n  // ✅ Delete a file\n  const handleDelete = async (fileId) => {\n    try {\n      await axios.delete(`http://localhost:8080/drive/files/${fileId}`, {\n        withCredentials: true,\n      });\n      fetchFiles(); // Refresh list\n    } catch (err) {\n      console.error('❌ Error deleting file:', err);\n      setError('Error deleting file');\n    }\n  };\n\n  // ✅ Download a file\n  const handleDownload = async (fileId) => {\n    try {\n      const response = await axios.get(\n        `http://localhost:8080/drive/files/download/${fileId}`,\n        {\n          withCredentials: true,\n          responseType: 'blob',\n        }\n      );\n\n      const blob = new Blob([response.data], {\n        type: response.headers['content-type'],\n      });\n\n      let filename = 'downloadedFile';\n      const disposition = response.headers['content-disposition'];\n      if (disposition && disposition.indexOf('filename=') !== -1) {\n        const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n        const matches = filenameRegex.exec(disposition);\n        if (matches != null && matches[1]) {\n          filename = matches[1].replace(/['\"]/g, '');\n        }\n      }\n\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      console.error('❌ Error downloading file:', err);\n      setError('Error downloading file');\n    }\n  };\n\n  return (\n    <div style={{ margin: '20px' }}>\n      <h1>DriveSync App</h1>\n\n      {user ? (\n        <>\n          <p>Welcome, {user.name || user.email || 'User'}!</p>\n\n          <div style={{ marginBottom: '10px' }}>\n            <a href=\"http://localhost:8080/logout\">\n              <button>Logout</button>\n            </a>\n          </div>\n\n          <div style={{ marginBottom: '10px' }}>\n            <button onClick={fetchFiles}>Refresh Files</button>\n          </div>\n\n          {error && <p style={{ color: 'red' }}>{error}</p>}\n\n          <h2>Your Google Drive Files</h2>\n          {loading ? (\n            <p>Loading files...</p>\n          ) : files.length ? (\n            <ul>\n              {files.map((file) => (\n                <li key={file.id}>\n                  {file.name}{' '}\n                  <button onClick={() => handleDelete(file.id)}>Delete</button>\n                  <button onClick={() => handleDownload(file.id)}>Download</button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>No files found.</p>\n          )}\n\n          <h2>Upload a File</h2>\n          <form onSubmit={handleFileUpload}>\n            <input\n              type=\"file\"\n              onChange={(e) => setSelectedFile(e.target.files[0])}\n            />\n            <button type=\"submit\">Upload</button>\n          </form>\n        </>\n      ) : (\n        <div>\n          <p>You are not logged in.</p>\n          <button\n            onClick={() =>\n              window.location.href = 'http://localhost:8080/oauth2/authorization/google'\n            }\n          >\n            Login with Google\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtD,MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}